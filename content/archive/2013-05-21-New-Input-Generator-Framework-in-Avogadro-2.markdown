---
layout: post
title: New Input Generator Framework in Avogadro 2
categories:
- Avogadro
- Chemistry
- FOSS
- Kitware
slug: "archives/267-New-Input-Generator-Framework-in-Avogadro-2.html"
s9y_link: http://blog.cryos.net/archives/267-New-Input-Generator-Framework-in-Avogadro-2.html
date: 2013-05-21 14:33:00.000000000 +00:00
---
<span>
<p><a href="http://avogadro.openmolecules.net/">Avogadro 1.x</a> had quite a large number of input generators that came from very humble beginnings. They were designed to be easy to write, and to give a simple path from a structure in Avogadro to something that could be used as an input file in one of many codes. Our basic approach was to add a C++ class per program we targeted, with one or two special cases. This meant that to develop an input generator it was necessary to learn some of the Avogadro API, and to at least compile a plugin (matching our compiler, <a href="http://qt-project.org/">Qt</a>, library versions, etc). It also led to minor differences between the different input generators, and a lot of copying/pasting of boilerplate code.</p>

<center><img src="http://blog.cryos.net/uploads/avogadro-ethane.png" width="871" height="752" alt="Avogadro 2 showing an ethane molecule" /></center>

<p>When developing the input generators for <a href="http://openchemistry.org/">Avogadro 2 as part of the Open Chemistry project</a> we wanted to make it easier to add new generators. We put a lot of thought into how to make this possible, and how to maintain a native look and feel without necessarily making an input generator developer learn C++, Qt, Avogadro and everything that goes along with setting up a development environment. The new input generator framework is largely language agnostic, with a minimum of assumptions. It currently executes the <a href="http://python.org/">Python</a> interpreter, but that is largely an artifact of the fact we have only developed input generators using Python.</p>

<center><img src="http://blog.cryos.net/uploads/avogadro-nwchem-input.png" width="869" height="752" alt="Avogadro 2 NWChem input generator with syntax highlighting" /></center>

<p>The input generators are executed in a separate process, using several passes to get the display name, options supported, syntax highlighting rules and finally to actually generate the input. The current pass is communicated using command-line arguments, input is passed to the program using standard input and formatted as <a href="http://www.json.org/">JSON</a>. The results should be passed back using the standard output stream, and depending on the pass should be JSON results or the actual input file. We also do some post-processing of the input file where the molecular geometry can be inserted following the specified format. This command line API is <a href="http://doc.openchemistry.org/avogadrolibs/api/class_avogadro_1_1_qt_plugins_1_1_input_generator.html#details">documented here</a>. The <a href="https://github.com/OpenChemistry/avogadrolibs/blob/master/avogadro/qtplugins/quantuminput/inputGenerators/nwchem.py">NWChem input generator</a> is the first to add syntax highlighting in an external plugin, the GAMESS input generator shows an approach using C++ ported from Avogadro 1.x.</p>

<p>This approach assures that an input generator cannot possibly crash or hang the interface, licensing is not an issue (separate execution process) and gives input generator developers the freedom to concentrate on turning options into the appropriate input file without worrying about the details of the application it is being used in. With relatively minor modifications Avogadro 2 could look for other file extensions and execute the appropriate interpreter, or simply execute the programs found in a given path. These files can be modified directly, if options change it is currently necessary to restart Avogadro, but if the input generation changes those changes would be reflected in Avogadro the next time the generator was run. Menu entries are added dynamically at program start up, and this concept could be extended to more of Avogadro. The main for the <a href="http://www.nwchem-sw.org/">NWChem</a> input generator is shown below,</p>

<div class="python geshi" style="text-align: left"><span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: #66cc66;">&lt;</span>u<span style="color: #66cc66;">&gt;</span>_name_<span style="color: #66cc66;">&lt;</span>/u<span style="color: #66cc66;">&gt;</span> == <span style="color: #483d8b;">&quot;&lt;u&gt;_main_&lt;/u&gt;&quot;</span>:<br />&#160; <span style="color: #dc143c;">parser</span> = argparse.<span style="color: black;">ArgumentParser</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'Generate a NWChem input file.'</span><span style="color: black;">&#41;</span><br />&#160; <span style="color: #dc143c;">parser</span>.<span style="color: black;">add_argument</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'--debug'</span>, action=<span style="color: #483d8b;">'store_true'</span><span style="color: black;">&#41;</span><br />&#160; <span style="color: #dc143c;">parser</span>.<span style="color: black;">add_argument</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'--print-options'</span>, action=<span style="color: #483d8b;">'store_true'</span><span style="color: black;">&#41;</span><br />&#160; <span style="color: #dc143c;">parser</span>.<span style="color: black;">add_argument</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'--generate-input'</span>, action=<span style="color: #483d8b;">'store_true'</span><span style="color: black;">&#41;</span><br />&#160; <span style="color: #dc143c;">parser</span>.<span style="color: black;">add_argument</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">'--display-name'</span>, action=<span style="color: #483d8b;">'store_true'</span><span style="color: black;">&#41;</span><br />&#160; args = <span style="color: #008000;">vars</span><span style="color: black;">&#40;</span><span style="color: #dc143c;">parser</span>.<span style="color: black;">parse_args</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span><br /><br />&#160; debug = args<span style="color: black;">&#91;</span><span style="color: #483d8b;">'debug'</span><span style="color: black;">&#93;</span><br /><br />&#160; <span style="color: #ff7700;font-weight:bold;">if</span> args<span style="color: black;">&#91;</span><span style="color: #483d8b;">'display_name'</span><span style="color: black;">&#93;</span>:<br />&#160; &#160; <span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">&quot;NWChem&quot;</span><span style="color: black;">&#41;</span><br />&#160; <span style="color: #ff7700;font-weight:bold;">if</span> args<span style="color: black;">&#91;</span><span style="color: #483d8b;">'print_options'</span><span style="color: black;">&#93;</span>:<br />&#160; &#160; <span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">&#40;</span>json.<span style="color: black;">dumps</span><span style="color: black;">&#40;</span>getOptions<span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span><br />&#160; <span style="color: #ff7700;font-weight:bold;">elif</span> args<span style="color: black;">&#91;</span><span style="color: #483d8b;">'generate_input'</span><span style="color: black;">&#93;</span>:<br />&#160; &#160; <span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">&#40;</span>json.<span style="color: black;">dumps</span><span style="color: black;">&#40;</span>generateInput<span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span></div>

<p>A snippet of the input generation code is shown below, where a variable is populated with what will be the raw input passed to the code.</p>

<div class="python geshi" style="text-align: left"><span style="color: #ff7700;font-weight:bold;">def</span> generateInputFile<span style="color: black;">&#40;</span>opts<span style="color: black;">&#41;</span>:<br />&#160; <span style="color: #808080; font-style: italic;"># Extract options:</span><br />&#160; title = opts<span style="color: black;">&#91;</span><span style="color: #483d8b;">'Title'</span><span style="color: black;">&#93;</span><br />&#160; calculate = opts<span style="color: black;">&#91;</span><span style="color: #483d8b;">'Calculation Type'</span><span style="color: black;">&#93;</span><br />&#160; theory = opts<span style="color: black;">&#91;</span><span style="color: #483d8b;">'Theory'</span><span style="color: black;">&#93;</span><br />&#160; basis = opts<span style="color: black;">&#91;</span><span style="color: #483d8b;">'Basis'</span><span style="color: black;">&#93;</span><br />&#160; multiplicity = opts<span style="color: black;">&#91;</span><span style="color: #483d8b;">'Multiplicity'</span><span style="color: black;">&#93;</span><br />&#160; charge = opts<span style="color: black;">&#91;</span><span style="color: #483d8b;">'Charge'</span><span style="color: black;">&#93;</span><br />&#160; <span style="color: #808080; font-style: italic;"># Preamble</span><br />&#160; nwfile = <span style="color: #483d8b;">&quot;&quot;</span><br />&#160; nwfile += <span style="color: #483d8b;">&quot;echo<span style="color: #000099; font-weight: bold;">\n</span><span style="color: #000099; font-weight: bold;">\n</span>&quot;</span><br />&#160; nwfile += <span style="color: #483d8b;">&quot;start molecule<span style="color: #000099; font-weight: bold;">\n</span><span style="color: #000099; font-weight: bold;">\n</span>&quot;</span><br />&#160; nwfile += <span style="color: #483d8b;">&quot;title <span style="color: #000099; font-weight: bold;">\&quot;</span>%s<span style="color: #000099; font-weight: bold;">\&quot;</span><span style="color: #000099; font-weight: bold;">\n</span>&quot;</span><span style="color: #66cc66;">%</span>title<br />&#160; <span style="color: #808080; font-style: italic;"># Coordinates</span><br />&#160; nwfile += <span style="color: #483d8b;">&quot;geometry units angstroms print xyz autosym<span style="color: #000099; font-weight: bold;">\n</span>&quot;</span><br />&#160; nwfile += <span style="color: #483d8b;">&quot;$$coords:Sxyz$$<span style="color: #000099; font-weight: bold;">\n</span>&quot;</span><br />&#160; nwfile += <span style="color: #483d8b;">&quot;end<span style="color: #000099; font-weight: bold;">\n</span><span style="color: #000099; font-weight: bold;">\n</span>&quot;</span><br />&#160; <span style="color: #808080; font-style: italic;"># More stuff here...</span><br />&#160; <span style="color: #ff7700;font-weight:bold;">return</span> nwfile</div>

<p>We hope that this framework will make it much easier for researchers to customize their input generator scripts to their needs, and we would welcome your feedback on how we could make it even easier. If there are other languages of interest we could add examples, the major requirement is that the language can create a self-contained script or executable that can use standard in/out, has some string handling capabilities and support for JSON.</p>
</span>
